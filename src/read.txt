Rating.propTypes = {
  value: (props, propName, componentName) => {
    // first get the value of the prop
    const prop = props[propName];

    // since we want to make this required let us check that first
    if(!prop) {
      return new Error(`${propName} is required in ${componentName}. Validation Failed`);
    }

    // the prop has a value let's check the type
    if (typeof prop != 'number') {
      return new Error(`Invalid prop, ${propName} is expected to be a number in ${componentName}. ${typeof prop} found.`);
    }

    // the prop is a number let us check the range
    if(prop < 1 || prop > 5) {
      return new Error(`Invalid prop, ${propName} should be in range 1 - 5 in ${componentName}. ${prop} found.`);
    }

  }
};

--------------------------------
Rating.propTypes = {
  value: PropTypes
        .oneOf([1,2,3,4,5])
        .isRequired
};

---------------------------------
BookmarkList.propTypes = {
  bookmarks: PropTypes.arrayOf(PropTypes.shape({
    title: PropTypes.string.isRequired,
    url: PropTypes.string.isRequired,
    rating: PropTypes.number,
    description: PropTypes.string
  }))
};

-----------------------------------
BookmarkList.propTypes = {
  bookmarks: PropTypes.arrayOf(PropTypes.object)
};

----------------------------------------
Bookmark.propTypes = {
  title: PropTypes.string.isRequired,
  url: PropTypes.string.isRequired,
  rating: PropTypes.number,
  description: PropTypes.string
};

PropTypes.array - an optional array
PropTypes.bool - an optional boolean value (true, false),
PropTypes.func - an optional function
PropTypes.object - an optional object
PropTypes.string - an optional String
PropTypes.number
-----------------------------------------


Bookmark.propTypes = {
  title: PropTypes.string.isRequired,
  url: (props, propName, componentName) => {
    // get the value of the prop
    const prop = props[propName];

    // do the isRequired check
    if(!prop) {
      return new Error(`${propName} is required in ${componentName}. Validation Failed`);
    }

    // check the type
    if (typeof prop != 'string') {
      return new Error(`Invalid prop, ${propName} is expected to be a string in ${componentName}. ${typeof prop} found.`);
    }

    // do the custom check here
    // using a simple regex
    if (prop.length < 5 || !prop.match(new RegExp(/^https?:\/\//))) {
      return new Error(`Invalid prop, ${propName} must be min length 5 and begin http(s)://. Validation Failed.`);
    }
  },
  rating: PropTypes.number,
  description: PropTypes.string
};